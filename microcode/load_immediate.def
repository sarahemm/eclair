# locations - start addresses of instructions
location    ldi8.al     9     # load immediate 8 bits into low byte of a
location    ldi8.bl     73    # load immediate 8 bits into low byte of b
location    ldi8.cl     137   # load immediate 8 bits into low byte of c
location    ldi8.dl     201   # load immediate 8 bits into low byte of d
location    ldi8.?l     206   # load immediate 8 bits into register from IR
location    ldi8.ah     11    # load immediate 8 bits into high byte of a
location    ldi8.bh     75    # load immediate 8 bits into high byte of b
location    ldi8.ch     139   # load immediate 8 bits into high byte of c
location    ldi8.dh     203   # load immediate 8 bits into high byte of d
location    ldi8.?h     205   # load immediate 8 bits into register from IR
location    ldi16.a     10    # load immediate 16 bits into a
location    ldi16.b     74    # load immediate 16 bits into b
location    ldi16.c     138   # load immediate 16 bits into c
location    ldi16.d     202   # load immediate 16 bits into d
location    ldi16.?     335   # load immediate 16 bits into register from IR
location    ldi16.sp    39    # load immediate 16 bits into sp
location    ldi16.dp    108   # load immediate 16 bits into dp

# instructions - actual implementation microcode

# load immediate 8 bits into low byte of supplied register
instruction ldi8.al     next_addr(ldi8.?l)
instruction ldi8.bl     next_addr(ldi8.?l)
instruction ldi8.cl     next_addr(ldi8.?l)
instruction ldi8.dl     next_addr(ldi8.?l)

# load immediate 8 bits into high byte of supplied register
instruction ldi8.ah     next_addr(ldi8.?h)
instruction ldi8.bh     next_addr(ldi8.?h)
instruction ldi8.ch     next_addr(ldi8.?h)
instruction ldi8.dh     next_addr(ldi8.?h)

# load immediate 16 bits into supplied register
instruction ldi16.a     next_addr(ldi16.?)
instruction ldi16.b     next_addr(ldi16.?)
instruction ldi16.c     next_addr(ldi16.?)
instruction ldi16.d     next_addr(ldi16.?)

# load immediate 8 bits into the FLAGS register
instruction ldi8.flags  inc_pc        src_mar(pc)   load_mar        mem_read        src_mdr(data) mdr_byte(low) load_mdr        src_xy(mdr)   load_x      load_status
instruction ldi8.flags  load_flag_pe  load_flag_m   load_flag_ie    next_addr(fetch)

# load immediate 16 bit into the stack pointer
instruction ldi16.sp    inc_pc        src_mar(pc)   src_mdr(data)   src_xy(mdr)     mem_read    load_mar        mdr_byte(high)   load_mdr
instruction ldi16.sp                  src_mar(pc)   src_mdr(data)   src_xy(mdr)     mem_read    inc_pc          op_16bit
instruction ldi16.sp                  src_mar(pc)   src_mdr(data)   src_xy(mdr)     mem_read    load_mar        mdr_byte(low)  load_mdr      load_y    load_x  load_reg(sp)  op_16bit  load_status
instruction ldi16.sp    next_addr(fetch)

# load immediate 16 bit into the data pointer
# TODO: look at optimizing this and the SP version, step 2 and 3 should be able to be combined?
instruction ldi16.dp    inc_pc        src_mar(pc)   src_mdr(data)   src_xy(mdr)     mem_read    load_mar        mdr_byte(high)   load_mdr
instruction ldi16.dp                  src_mar(pc)   src_mdr(data)   src_xy(mdr)     mem_read    inc_pc          op_16bit
instruction ldi16.dp                  src_mar(pc)   src_mdr(data)   src_xy(mdr)     mem_read    load_mar        mdr_byte(low)  load_mdr      load_x  load_reg(dp)  op_16bit  load_status next_addr(fetch)

# load immediate 8 bits into low byte of register selected by IR[6..7]
instruction ldi8.?l     inc_pc        src_mar(pc)     load_mar        mem_read    src_mdr(data)   mdr_byte(low)   load_mdr      src_xy(mdr)   reg_byte(low) load_x    load_reg(via_ir)    load_status next_addr(fetch)

# load immediate 8 bits into high byte of register selected by IR[6..7]
instruction ldi8.?h     inc_pc        src_mar(pc)     load_mar        mem_read    src_mdr(data)   mdr_byte(high)   load_mdr      src_xy(mdr)   reg_byte(high) load_x    load_reg(via_ir)    load_status next_addr(fetch)

# load immediate 8 bits into register selected by IR[6..7]
instruction ldi16.?     inc_pc        src_mar(pc)   src_mdr(data)   src_xy(mdr)     mem_read    load_mar        mdr_byte(high)     load_mdr
instruction ldi16.?                   inc_pc
instruction ldi16.?                   src_mar(pc)   src_mdr(data)   src_xy(mdr)     mem_read    load_mar        mdr_byte(low)    load_mdr      load_y    load_x  load_reg(via_ir)  op_16bit  load_status next_addr(fetch)
