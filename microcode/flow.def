# locations - start addresses of instructions
location    jmp         69    # unconditional immediate jump
location    jmpz        128   # jump if Z
location    jmpnz       124   # jump if not Z
location    jmpe        197   # jump if E
location    jmpne       188   # jump if not E
location    jmpne-cont  372
location    jmpo        59    # jump if CO
location    jmpo-cont   392
location    jmpno       123   # jump if not CO
location    jmpno-cont  395

location    call        60    # push PC to stack then jump immediate
location    call-cont   363
location    pop16.pc    196   # pop 16 bits from address pointed to by SP-- into PC
location    pop16.pc-cont 358
location    cmp16.a?    38    # load two registers into X/Y and set flags
location    cmp16.b?    102   # load two registers into X/Y and set flags
location    cmp16.c?    166   # load two registers into X/Y and set flags
location    cmp16.d?    230   # load two registers into X/Y and set flags
location    cmp16.??    350   # load two registers into X/Y and set flags

# aliases - other names for instructions
alias       ret         pop16.pc
alias       cmp16.aa    cmp16.a?
alias       cmp16.ab    cmp16.a?
alias       cmp16.ac    cmp16.a?
alias       cmp16.ad    cmp16.a?
alias       cmp16.ba    cmp16.b?
alias       cmp16.bb    cmp16.b?
alias       cmp16.bc    cmp16.b?
alias       cmp16.bd    cmp16.b?
alias       cmp16.ca    cmp16.c?
alias       cmp16.cb    cmp16.c?
alias       cmp16.cc    cmp16.c?
alias       cmp16.cd    cmp16.c?
alias       cmp16.da    cmp16.d?
alias       cmp16.db    cmp16.d?
alias       cmp16.dc    cmp16.d?
alias       cmp16.dd    cmp16.d?

# instructions - actual implementation microcode

# immediate jump to the address specified
instruction jmp         inc_pc        src_mar(pc)     mem_read        load_mar      src_mdr(data)   src_xy(mdr)       mdr_byte(high)   load_mdr
instruction jmp         inc_pc        src_mar(pc)     mem_read        load_mar      src_mdr(data)   src_xy(mdr)       mdr_byte(low)  load_mdr
instruction jmp         src_xy(mdr)   alu_op(x)       load_x
instruction jmp         branch_cond(always)           load_pc         next_addr(fetch2)

# immediate jump to the address specified if Z(ero) is true
instruction jmpz        inc_pc        src_mar(pc)     mem_read        load_mar      src_mdr(data)   src_xy(mdr)       mdr_byte(high)   load_mdr
instruction jmpz        inc_pc        src_mar(pc)     mem_read        load_mar      src_mdr(data)   src_xy(mdr)       mdr_byte(low)  load_mdr
instruction jmpz        inc_pc        src_xy(mdr)     alu_op(x)       load_x
instruction jmpz        branch_cond(z)                load_pc         next_addr(fetch2)

# immediate jump to the address specified if Z(ero) is false
instruction jmpnz       inc_pc        src_mar(pc)     mem_read        load_mar      src_mdr(data)   src_xy(mdr)       mdr_byte(high)   load_mdr
instruction jmpnz       inc_pc        src_mar(pc)     mem_read        load_mar      src_mdr(data)   src_xy(mdr)       mdr_byte(low)  load_mdr
instruction jmpnz       inc_pc        src_xy(mdr)     alu_op(x)       load_x
instruction jmpnz       branch_negate branch_cond(z)  load_pc         next_addr(fetch2)

# immediate jump to the address specified if E(qual) is true
instruction jmpe        inc_pc        src_mar(pc)     mem_read        load_mar      src_mdr(data)   src_xy(mdr)       mdr_byte(high)   load_mdr
instruction jmpe        inc_pc        src_mar(pc)     mem_read        load_mar      src_mdr(data)   src_xy(mdr)       mdr_byte(low)  load_mdr
instruction jmpe        inc_pc        src_xy(mdr)     alu_op(x)       load_x
instruction jmpe        branch_cond(e)                load_pc         next_addr(fetch2)

# immediate jump to the address specified if E(qual) is false
instruction jmpne       inc_pc        src_mar(pc)     mem_read        load_mar      src_mdr(data)   src_xy(mdr)       mdr_byte(high)   load_mdr next_addr(jmpne-cont)
instruction jmpne-cont  inc_pc        src_mar(pc)     mem_read        load_mar      src_mdr(data)   src_xy(mdr)       mdr_byte(low)  load_mdr
instruction jmpne-cont  inc_pc        src_xy(mdr)     alu_op(x)       load_x
instruction jmpne-cont  branch_negate branch_cond(e)  load_pc         next_addr(fetch2)

# immediate jump to the address specified if E(qual) is true
instruction jmpo        inc_pc        src_mar(pc)     mem_read        load_mar      src_mdr(data)   src_xy(mdr)       mdr_byte(high)   load_mdr next_addr(jmpo-cont)
instruction jmpo-cont   inc_pc        src_mar(pc)     mem_read        load_mar      src_mdr(data)   src_xy(mdr)       mdr_byte(low)  load_mdr
instruction jmpo-cont   inc_pc        src_xy(mdr)     alu_op(x)       load_x
instruction jmpo-cont   branch_cond(co)               load_pc         next_addr(fetch2)

# immediate jump to the address specified if E(qual) is false
instruction jmpno       inc_pc        src_mar(pc)     mem_read        load_mar      src_mdr(data)   src_xy(mdr)       mdr_byte(high)   load_mdr next_addr(jmpno-cont)
instruction jmpno-cont  inc_pc        src_mar(pc)     mem_read        load_mar      src_mdr(data)   src_xy(mdr)       mdr_byte(low)  load_mdr
instruction jmpno-cont  inc_pc        src_xy(mdr)     alu_op(x)       load_x
instruction jmpno-cont  branch_negate branch_cond(co) load_pc         next_addr(fetch2)

# load two registers into X/Y and set flags
instruction cmp16.a?    inc_pc src_xy(from_ir)  load_x next_addr(cmp16.??)
instruction cmp16.b?    inc_pc src_xy(from_ir)  load_x next_addr(cmp16.??)
instruction cmp16.c?    inc_pc src_xy(from_ir)  load_x next_addr(cmp16.??)
instruction cmp16.d?    inc_pc src_xy(from_ir)  load_x next_addr(cmp16.??)
instruction cmp16.??    src_mar(pc) load_mar  load_rr src_xy(from_rr) load_y
instruction cmp16.??    alu_mode(arith) alu_op(x)   op_16bit      load_status    next_addr(fetch)

# push current pc onto stack then jump to immediate location
# === these 2 words are from push16.pc ===
instruction call   src_mar(pc)     load_mar      src_xy(mar)     load_x        alu_op(x)   src_mdr(z)  mdr_byte(high) load_mdr
instruction call   mdr_byte(low)  src_xy(mdr)   load_mdr        load_x        next_addr(call-cont)
# === this 1 word is independent ===
instruction call-cont    xy_imm_lsb(3) src_xy(imm) load_y      alu_op(add) load_mdr
# === these 4 words are from push16.? ===
instruction call-cont    mdr_byte(high) alu_op(x)     src_xy(sp)      load_x          src_mar(z)      load_mar  mem_write
# increment SP into Z and load that into MAR
instruction call-cont    xy_imm_lsb(1) load_y          alu_op(add)     src_mar(z)      load_mar
# write immediate value from low byte of MDR into SP+1
instruction call-cont    mdr_byte(low)  mem_write
# add the 1'b1 already in Y to the SP+1 already in MAR, put the result (SP+2) back into SP
instruction call-cont    src_xy(mar)   load_x          alu_op(add)     load_reg(sp)
# === these 4 words are from jmp ===
instruction call-cont    inc_pc        src_mar(pc)     mem_read        load_mar      src_mdr(data)   src_xy(mdr)       mdr_byte(high)   load_mdr
instruction call-cont    inc_pc        src_mar(pc)     mem_read        load_mar      src_mdr(data)   src_xy(mdr)       mdr_byte(low)  load_mdr
instruction call-cont    src_xy(mdr)   alu_op(x)       load_x
instruction call-cont    branch_cond(always)           load_pc         next_addr(fetch2)

# pop 16 bits from address pointed to by SP-- into PC
# load SP into MAR
instruction pop16.pc    src_xy(sp)      load_x      alu_op(x-1)   src_mar(z)    load_mar next_addr(pop16.pc-cont)
# load RAM contents into low byte of MDR and load MAR back into SP
instruction pop16.pc-cont    mdr_byte(low)  mem_read    src_mdr(data) load_mdr      src_xy(mar)   load_x  load_reg(sp)
# subtract 1 from SP, put it into the MAR
instruction pop16.pc-cont    src_xy(sp)      alu_op(x-1) src_mar(z)    load_mar
# load RAM contents into the high byte of MDR and push that all the way through to Z
instruction pop16.pc-cont    mdr_byte(high)   mem_read    src_mdr(data) load_mdr      src_xy(mdr)   load_x
# load contents of MDR into PC
instruction pop16.pc-cont    src_xy(mdr)     load_x      load_pc
# load MAR back into SP now that we're done, then fetch next instruction w/o incrementing PC
instruction pop16.pc-cont    src_xy(mar)     load_x      load_reg(sp)  next_addr(fetch2)
