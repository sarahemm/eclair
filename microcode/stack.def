# locations - start addresses of instructions
location    push8.imm   64    # push immediate 8 bits to address pointed to by SP++
location    push8.?     346   # common latter half of push8.*
location    push16.imm  135   # push immediate 16 bits to address pointed to by SP++
location    push16.pc   67    # push PC to address pointed to by SP++
location    push16.?    342   # common latter half of push16.*
location    push16.a    52    # push a to stack
location    push16.b    116   # push b to stack
location    push16.c    180   # push c to stack
location    push16.d    244   # push d to stack
location    push8.al    13    # push low byte of a to stack
location    push8.bl    77    # push low byte of b to stack
location    push8.cl    141   # push low byte of c to stack
location    push8.dl    205   # push low byte of d to stack
location    push8.?l    484   # common latter half of push8.*l
location    push8.ah    14    # push high byte of a to stack
location    push8.bh    78    # push high byte of b to stack
location    push8.ch    142   # push high byte of c to stack
location    push8.dh    206   # push high byte of d to stack
location    push8.?h    487   # common latter half of push8.*h

location    pop16.a     42    # pop stack to a
location    pop16.b     106   # pop stack to b
location    pop16.c     170   # pop stack to c
location    pop16.d     234   # pop stack to d
location    pop16.?     478   # common latter half of pop16.*

location    pop8.al     57    # pop stack to low byte of a
location    pop8.bl     121   # pop stack to low byte of b
location    pop8.cl     185   # pop stack to low byte of c
location    pop8.dl     249   # pop stack to low byte of d
location    pop8.?l     490   # common latter half of pop16.*

# instructions - actual implementation microcode

# load immediate 8 bits into MDR
instruction push8.imm   inc_pc        src_mar(pc)   load_mar        src_mdr(data)   mem_read      mdr_byte(low) load_mdr next_addr(push8.?)

# TODO: better comment
# load the value of SP into X/Z/MAR
instruction push8.?     alu_op(x)     src_xy(sp)      load_x        src_mar(z)    load_mar
# write immediate value from MDR into address pointed to by SP (now in Z)
instruction push8.?     src_mar(z)    load_mar        mem_write
# load 1'b1 into Y
instruction push8.?     src_xy(imm)   xy_imm_lsb(1)   load_y    
# add 1'b1 to X (already contains SP), then put the result back into SP, inc PC and jump back to fetching
instruction push8.?     alu_op(add)   load_reg(sp)    next_addr(fetch)

# push immediate 16 bits onto stack
# load immediate value from address pointed to by PC into high byte of MDR
instruction push16.imm  inc_pc        src_mar(pc)   load_mar        src_mdr(data)   mem_read    mdr_byte(high)   load_mdr
# increment pc and load immediate value from address pointed to by PC into low byte of MDR
instruction push16.imm  inc_pc        src_mar(pc)     load_mar        src_mdr(data)   mem_read  mdr_byte(low)  load_mdr  next_addr(push16.?)

# push program counter onto stack
# pc -> mar -> x -> z -> mdr
instruction push16.pc   src_mar(pc)     load_mar      src_xy(mar)     load_x        alu_op(x)   src_mdr(z)  mdr_byte(high) load_mdr
instruction push16.pc   mdr_byte(low)  src_xy(mdr)   load_mdr        load_x        next_addr(push16.?)

# push 16 bits from a register onto the stack
instruction push16.a  src_mdr(z)  src_xy(from_ir) op_16bit load_x  load_mdr next_addr(push16.?)
instruction push16.b  src_mdr(z)  src_xy(from_ir) op_16bit load_x  load_mdr next_addr(push16.?)
instruction push16.c  src_mdr(z)  src_xy(from_ir) op_16bit load_x  load_mdr next_addr(push16.?)
instruction push16.d  src_mdr(z)  src_xy(from_ir) op_16bit load_x  load_mdr next_addr(push16.?)

# push 16 bits from MDR
# write immediate value from high byte of MDR into address pointed to by SP (via SP->X->Z->MAR)
instruction push16.?    mdr_byte(high) alu_op(x)     src_xy(sp)      load_x          src_mar(z)      load_mar  mem_write
# increment SP into Z and load that into MAR
instruction push16.?    xy_imm_lsb(1) load_y          alu_op(add)     src_mar(z)      load_mar 
# write immediate value from low byte of MDR into SP+1
instruction push16.?    mdr_byte(low)  mem_write
# add the 1'b1 already in Y to the SP+1 already in MAR, put the result (SP+2) back into SP
instruction push16.?    src_xy(mar)   load_x          alu_op(add)     load_reg(sp)    next_addr(fetch)

# push low 8 bits from register
instruction push8.al  src_mdr(z)  src_xy(from_ir) reg_byte(low) mdr_byte(low) load_x  load_mdr next_addr(push8.?l)
instruction push8.bl  src_mdr(z)  src_xy(from_ir) reg_byte(low) mdr_byte(low) load_x  load_mdr next_addr(push8.?l)
instruction push8.cl  src_mdr(z)  src_xy(from_ir) reg_byte(low) mdr_byte(low) load_x  load_mdr next_addr(push8.?l)
instruction push8.dl  src_mdr(z)  src_xy(from_ir) reg_byte(low) mdr_byte(low) load_x  load_mdr next_addr(push8.?l)

# write immediate value from low byte of MDR into address pointed to by SP (via SP->X->Z->MAR)
instruction push8.?l    mdr_byte(low) alu_op(x)     src_xy(sp)      load_x          src_mar(z)      load_mar  mem_write
# increment SP into Z and load that into MAR
instruction push8.?l    xy_imm_lsb(1) load_y          alu_op(add)     src_mar(z)      load_mar 
# load MAR back into SP
instruction push8.?l    src_xy(mar)   load_x          alu_op(x)     load_reg(sp)    next_addr(fetch)

# push high 8 bits from register
instruction push8.ah  src_mdr(z)  src_xy(from_ir) reg_byte(high) mdr_byte(high) load_x  load_mdr next_addr(push8.?h)
instruction push8.bh  src_mdr(z)  src_xy(from_ir) reg_byte(high) mdr_byte(high) load_x  load_mdr next_addr(push8.?h)
instruction push8.ch  src_mdr(z)  src_xy(from_ir) reg_byte(high) mdr_byte(high) load_x  load_mdr next_addr(push8.?h)
instruction push8.dh  src_mdr(z)  src_xy(from_ir) reg_byte(high) mdr_byte(high) load_x  load_mdr next_addr(push8.?h)

# write immediate value from high byte of MDR into address pointed to by SP (via SP->X->Z->MAR)
instruction push8.?h    mdr_byte(high) alu_op(x)     src_xy(sp)      load_x          src_mar(z)      load_mar  mem_write
# increment SP into Z and load that into MAR
instruction push8.?h    xy_imm_lsb(1) load_y          alu_op(add)     src_mar(z)      load_mar 
# load MAR back into SP
instruction push8.?h    src_xy(mar)   load_x          alu_op(x)     load_reg(sp)    next_addr(fetch)


# pop 16 bits from address pointed to by SP-- into specified register
instruction pop16.a next_addr(pop16.?)
instruction pop16.b next_addr(pop16.?)
instruction pop16.c next_addr(pop16.?)
instruction pop16.d next_addr(pop16.?)

# load SP into MAR
instruction pop16.?    src_xy(sp)      load_x      alu_op(x-1)   src_mar(z)    load_mar
# load RAM contents into low byte of MDR and load MAR back into SP
instruction pop16.?    mdr_byte(low)  mem_read    src_mdr(data) load_mdr      src_xy(mar)   load_x  load_reg(sp)
# subtract 1 from SP, put it into the MAR
instruction pop16.?    src_xy(sp)      alu_op(x-1) src_mar(z)    load_mar
# load RAM contents into the high byte of MDR and push that all the way through to Z
instruction pop16.?    mdr_byte(high)   mem_read    src_mdr(data) load_mdr      src_xy(mdr)   load_x
# load contents of MDR into the register referenced in IR
instruction pop16.?    src_xy(mdr)     load_x      op_16bit      load_reg(via_ir)
# load MAR back into SP now that we're done, then go back to fetch the next instruction
instruction pop16.?    src_xy(mar)     load_x      load_reg(sp)  next_addr(fetch)

# pop byte from address pointed to by SP-- into low byte of specified register
instruction pop8.al next_addr(pop8.?l)
instruction pop8.bl next_addr(pop8.?l)
instruction pop8.cl next_addr(pop8.?l)
instruction pop8.dl next_addr(pop8.?l)

# load SP-1 into MAR
instruction pop8.?l    src_xy(sp)      load_x      alu_op(x-1)   src_mar(z)    load_mar
# load RAM contents into low byte of MDR and load MAR back into SP
instruction pop8.?l    mdr_byte(low)  mem_read    src_mdr(data) load_mdr      src_xy(mar)   load_x  load_reg(sp)
# load contents of MDR into the register referenced in IR
instruction pop8.?l    src_xy(mdr)     load_x      op_16bit      load_reg(via_ir) next_addr(fetch)
