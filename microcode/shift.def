# locations - start addresses of instructions
location    shl16.a     12    # shift register a left
location    shl16.b     76    # shift register b left
location    shl16.c     140   # shift register c left
location    shl16.d     204   # shift register d left
location    shl16.?       256 # shift 16 bits left
location    shl16.?-done  260 # shift 16 bits left (finalization step)
location    shl8.al     13    # shift low byte of register a left
location    shl8.bl     77    # shift low byte of register b left
location    shl8.cl     141   # shift low byte of register c left
location    shl8.dl     211   # shift low byte of register d left
location    shl8.?l     261   # shift low byte of register left
location    shl8.?l-done  265 # shift low byte of register left (finalization step)
location    shl8.ah     32    # shift high byte of register a left
location    shl8.bh     78    # shift high byte of register b left
location    shl8.ch     142   # shift high byte of register c left
location    shl8.dh     222   # shift high byte of register d left
location    shl8.?h     266   # shift high byte of register left
location    shl8.?h-done  271 # shift high byte of register left (finalization step)
location    shr16.a     15    # shift register a right
location    shr16.b     79    # shift register b right
location    shr16.c     143   # shift register c right
location    shr16.d     207   # shift register d right
location    shr16.?     272   # shift 16 bits right
location    shr16.?-done  276 # shift 16 bits right (finalization step)
location    shr8.al     43    # shift low byte of register a right
location    shr8.bl     112   # shift low byte of register b right
location    shr8.cl     134   # shift low byte of register c right
location    shr8.dl     199   # shift low byte of register d right
location    shr8.?l     277   # shift low byte of register left
location    shr8.?l-done 284  # shift low byte of register left (finalization step)
location    shr8.ah     46    # shift high byte of register a right
location    shr8.bh     106   # shift high byte of register b right
location    shr8.ch     167   # shift high byte of register c right
location    shr8.dh     198   # shift high byte of register d right
location    shr8.?h     286   # shift low byte of register left
location    shr8.?h-done 291  # shift low byte of register left (finalization step)

# instructions - actual implementation microcode

# shift supplied 16-bit register left
instruction shl16.a     op_16bit        src_xy(a)         load_x        inc_pc  next_addr(shl16.?)
instruction shl16.b     op_16bit        src_xy(b)         load_x        inc_pc  next_addr(shl16.?)
instruction shl16.c     op_16bit        src_xy(c)         load_x        inc_pc  next_addr(shl16.?)
instruction shl16.d     op_16bit        src_xy(d)         load_x        inc_pc  next_addr(shl16.?)

# shift 16-bit register selected by IR[6..7] left
# load RPT from immediate
instruction shl16.?     mem_read        src_mar(pc)       load_mar      src_mdr(data)     load_mdr
instruction shl16.?     rpt_mode(load)  rpt_exec
# shift left by one bit
instruction shl16.?     op_16bit        alu_op(x+x)       src_mar(z)    load_mar    rpt_mode(dec)     rpt_exec  
instruction shl16.?     op_16bit        src_xy(mar)       load_x        next_addr(-1) rptz_next_addr(shl16.?-done)
# put the result back into the register it came from
instruction shl16.?-done     op_16bit        src_xy(mar)       alu_op(x)     load_x      load_reg(via_ir)  load_status   next_addr(fetch)

# shift low byte of supplied 8-bit register left
instruction shl8.al     mdr_byte(low)   src_xy(a)         load_x        inc_pc  next_addr(shl8.?l)
instruction shl8.bl     mdr_byte(low)   src_xy(b)         load_x        inc_pc  next_addr(shl8.?l)
instruction shl8.cl     mdr_byte(low)   src_xy(c)         load_x        inc_pc  next_addr(shl8.?l)
instruction shl8.dl     mdr_byte(low)   src_xy(d)         load_x        inc_pc  next_addr(shl8.?l)

# shift low byte of register selected by IR[6..7] left
# load RPT from immediate
instruction shl8.?l     mem_read        src_mar(pc)       load_mar      src_mdr(data)     load_mdr
instruction shl8.?l     rpt_mode(load)  rpt_exec
# shift left by one bit
instruction shl8.?l     mdr_byte(low)   alu_op(x+x)       src_mar(z)    load_mar    rpt_mode(dec)     rpt_exec  
instruction shl8.?l     mdr_byte(low)   src_xy(mar)       load_x        next_addr(-1) rptz_next_addr(shl8.?l-done)
# put the result back into the register it came from
instruction shl8.?l-done                src_xy(mar)       alu_op(x)     load_x      load_reg(via_ir)  load_status   next_addr(fetch)

# shift low byte of supplied 8-bit register left
instruction shl8.ah     inc_pc  next_addr(shl8.?h)
instruction shl8.bh     inc_pc  next_addr(shl8.?h)
instruction shl8.ch     inc_pc  next_addr(shl8.?h)
instruction shl8.dh     inc_pc  next_addr(shl8.?h)

# shift high byte of register selected by IR[6..7] left
# TODO: this can almost certainly be optimized
# load RPT from immediate and zero out low byte of MDR so we can later use the high byte alone
instruction shl8.?h     mem_read        src_mar(pc)     load_mar      src_mdr(data)     load_mdr
instruction shl8.?h     xy_imm_lsb(0)   src_xy(imm)     load_x        src_mdr(z) load_mdr  rpt_mode(load)  rpt_exec
# move value from register into MDR (our temp register)
# we can't work in-place as the low byte of the register will get shifted into the high byte
instruction shl8.?h     mdr_byte(high)  src_xy(from_ir) load_x        src_mdr(z) load_mdr
# shift left by one bit
instruction shl8.?h     src_xy(mdr)     load_x          rpt_mode(dec)     rpt_exec  
instruction shl8.?h     alu_op(x+x)     reg_byte(high) load_reg(via_ir)  src_mdr(z) mdr_byte(high) load_mdr load_status  next_addr(-1) rptz_next_addr(shl8.?h-done)
# this is really just here because we can't do long jumps based on rptz
instruction shl8.?h-done    next_addr(fetch)

# shift supplied 16-bit register left
instruction shr16.a     op_16bit        src_xy(a)         load_x        inc_pc  next_addr(shr16.?)
instruction shr16.b     op_16bit        src_xy(b)         load_x        inc_pc  next_addr(shr16.?)
instruction shr16.c     op_16bit        src_xy(c)         load_x        inc_pc  next_addr(shr16.?)
instruction shr16.d     op_16bit        src_xy(d)         load_x        inc_pc  next_addr(shr16.?)

# shift 16-bit register selected by IR[6..7] right
# load RPT from immediate
instruction shr16.?     mem_read        src_mar(pc)       load_mar      src_mdr(data)     load_mdr
# after loading RPT, we start at the 'end' of the loop, since we have to initialize MAR from Z
# before we start shifting
instruction shr16.?     rpt_mode(load)  rpt_exec          next_addr(+2)
# shift right by one bit
instruction shr16.?     op_16bit        src_xy(mar-shr)   load_x        rpt_mode(dec)     rpt_exec
instruction shr16.?     op_16bit        src_mar(z)        load_mar      next_addr(-1)     rptz_next_addr(shr16.?-done)
# put the result back into the register it came from
instruction shr16.?-done     op_16bit        src_xy(mar)       alu_op(x)     load_x      load_reg(via_ir)  load_status   next_addr(fetch)

# shift high byte of supplied 8-bit register right
instruction shr8.ah     inc_pc  next_addr(shr8.?h)
instruction shr8.bh     inc_pc  next_addr(shr8.?h)
instruction shr8.ch     inc_pc  next_addr(shr8.?h)
instruction shr8.dh     inc_pc  next_addr(shr8.?h)

# shift high byte of register selected by IR[6..7] right
# load RPT from immediate
instruction shr8.?h     mem_read        src_mar(pc)       load_mar      src_mdr(data)     load_mdr
instruction shr8.?h     rpt_mode(load)  rpt_exec
# move value from register into MDR (our temp register)
# we can't work in-place as the low byte of the register will get shifted into the high byte
instruction shr8.?h     mdr_byte(high)  src_xy(from_ir)   load_x        src_mdr(z)        load_mdr  next_addr(+2)
# shift left by one bit
instruction shr8.?h     mdr_byte(low)   src_xy(mar-shr)   load_x        rpt_mode(dec)     rpt_exec
instruction shr8.?h     mdr_byte(low)   src_mar(z)        load_mar      next_addr(-1) rptz_next_addr(shr8.?h-done)
# put the result back into the register it came from
instruction shr8.?h-done reg_byte(high) src_xy(mar)       alu_op(x)     load_x      load_reg(via_ir)  load_status   next_addr(fetch)

# shift low byte of supplied 8-bit register right
instruction shr8.al     inc_pc  next_addr(shr8.?l)
instruction shr8.bl     inc_pc  next_addr(shr8.?l)
instruction shr8.cl     inc_pc  next_addr(shr8.?l)
instruction shr8.dl     inc_pc  next_addr(shr8.?l)

# shift low byte of register selected by IR[6..7] right
# TODO: wow, this is kind of a mess and hopefully can be cleaned up once I'm less bored of working on shifts
# load RPT from immediate
instruction shr8.?l     mem_read        src_mar(pc)       load_mar      src_mdr(data)     load_mdr
instruction shr8.?l     rpt_mode(load)  rpt_exec
# move value from low byte of our register into the high byte of MAR
# we can't work in-place as the high byte of the register will get shifted into the low byte
# but we can only shift right using MAR, not MDR, so we have to go reg->MDR->MAR
instruction shr8.?l     mdr_byte(low)   src_xy(from_ir)   load_x        src_mdr(z)        load_mdr
instruction shr8.?l     mdr_byte(high)  xy_imm_lsb(0)     src_xy(imm)   load_x            src_mdr(z)        load_mdr
instruction shr8.?l     src_xy(mdr)     load_x            src_mar(z)    load_mar          next_addr(+2)
# shift left by one bit
instruction shr8.?l     mdr_byte(low)   src_xy(mar-shr)   load_x        rpt_mode(dec)     rpt_exec
instruction shr8.?l     mdr_byte(low)   src_mar(z)        load_mar      next_addr(-1) rptz_next_addr(shr8.?l-done)
# put the result from MAR back into the register it came from
instruction shr8.?l-done src_xy(mar)    load_x            reg_byte(low) load_reg(via_ir)  load_status   next_addr(fetch)
