# ECLair Microcode

# files - output files with which bit positions go in each one
file  microcode.bin  0   64

# fields - names for bit positions
# edge-sensitive signals
field write_pte   0     1
field load_mdr_l  1     1
field load_mdr_h  2     1
field load_mar    3     1
field load_ir     4     1
field inc_pc      5     1
field load_pc     6     1
field load_reg    7     3
field load_x      10    1
field load_y      11    1
field load_z      12    1
field load_pid    13    1
# level-sensitive signals
field next_addr   25    8
field src_mar     33    1
field src_mdr     34    1
field alu_mode    35    1
field alu_op      36    4
field src_xy      40    3
field mem_read    43    1
field mem_write   44    1
field op_16bit    45    1

# enums - names for values that go into bit positions
enum  src_mar   z       0
enum  src_mar   pc      1
enum  src_mdr   z       0
enum  src_mdr   data    1
enum  load_reg  a       1
enum  load_reg  b       2
enum  load_reg  c       3
enum  load_reg  d       4
enum  load_reg  sp      5
enum  load_reg  via_ir  7
enum  alu_mode  arith   0
enum  alu_mode  logic   1
enum  alu_op    x       0
enum  alu_op    add     6
enum  src_xy    zero    0
enum  src_xy    a       1
enum  src_xy    b       2
enum  src_xy    c       3
enum  src_xy    d       4
enum  src_xy    sp      5
enum  src_xy    mar     6
enum  src_xy    mdr     7

# locations - start addresses of instructions
location    init        0
location    fetch       2
location    ldi8.al     5     # load immediate 8 bits into low byte of a
location    ldi8.bl     69    # load immediate 8 bits into low byte of b
location    ldi8.cl     133   # load immediate 8 bits into low byte of c
location    ldi8.dl     197   # load immediate 8 bits into low byte of d
location    ldi8.?l     200   # load immediate 8 bits into register from IR
location    ldi16.a     6     # load immediate 16 bits into a
location    ldi16.b     70    # load immediate 16 bits into b
location    ldi16.c     134   # load immediate 16 bits into c
location    ldi16.d     198   # load immediate 16 bits into d
location    ldi16.?     203   # load immediate 16 bits into register from IR
location    ldi8.pid    7     # load immediate 8 bits into PID register
location    add16.ab    11    # add a and b registers, result goes into a
location    jmp         14    # unconditional immediate jump
location    wrpte       18    # write page table entry using data in a and address in d
location    hlt         254

# instructions - each one is one word of microcode, glues everything above together
instruction init        src_xy(zero)  alu_mode(arith) alu_op(x)       load_x      load_y  load_z
instruction init        hold_last     load_pc
instruction fetch       src_mar(pc)   load_mar        mem_read load_ir
instruction fetch       inc_pc        next_addr(ir)

instruction ldi8.al     next_addr(ldi8.?l)
instruction ldi8.bl     next_addr(ldi8.?l)
instruction ldi8.cl     next_addr(ldi8.?l)
instruction ldi8.dl     next_addr(ldi8.?l)

instruction ldi16.a     next_addr(ldi16.?)
instruction ldi16.b     next_addr(ldi16.?)
instruction ldi16.c     next_addr(ldi16.?)
instruction ldi16.d     next_addr(ldi16.?)

instruction ldi8.pid    src_mar(pc)   src_mdr(data)   src_xy(mdr)     mem_read    load_mar
instruction ldi8.pid    hold_last     load_mar        load_mdr_l      load_x      load_z  load_pid
instruction ldi8.pid    inc_pc        next_addr(fetch)

instruction ldi8.?l     src_mar(pc)   src_mdr(data)   src_xy(mdr)     mem_read    load_mar
instruction ldi8.?l     hold_last     load_mar        load_mdr_l      load_x      load_z  load_reg(via_ir)
instruction ldi8.?l     inc_pc        next_addr(fetch)

instruction ldi16.?     src_mar(pc)   src_mdr(data)   src_xy(mdr)     mem_read
instruction ldi16.?     hold_last     load_mar        load_mdr_l
instruction ldi16.?     src_mar(pc)   src_mdr(data)   src_xy(mdr)     mem_read    inc_pc          op_16bit
instruction ldi16.?     src_mar(pc)   src_mdr(data)   src_xy(mdr)     mem_read    load_mar        load_mdr_h      load_y    load_x      load_z  load_reg(via_ir)  op_16bit
instruction ldi16.?     inc_pc        next_addr(fetch)

instruction add16.ab    src_xy(a)     load_x
instruction add16.ab    src_xy(b)     load_y
instruction add16.ab    alu_mode(arith) alu_op(add)   op_16bit        load_z        load_reg(a)     next_addr(fetch)

instruction jmp                       src_mar(pc)     mem_read        load_mar      src_mdr(data)   src_xy(mdr)     load_mdr_l
instruction jmp         inc_pc        src_mar(pc)     mem_read        load_mar      src_mdr(data)   src_xy(mdr)     load_mdr_h
instruction jmp         src_xy(mdr)   alu_op(x)       load_x          load_z
instruction jmp         load_pc       next_addr(fetch)

instruction wrpte       alu_op(x)     src_xy(d)       load_x          load_z        src_mar(z)      load_mar
instruction wrpte       alu_op(x)     src_xy(a)       load_x          load_z        write_pte       next_addr(fetch)

instruction hlt         next_addr(hlt)
